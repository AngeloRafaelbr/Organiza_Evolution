{
	"info": {
		"_postman_id": "882fd670-5aaf-4039-a4aa-73d9194e6bc0",
		"name": "Organiza_Evolution-GerenciaDeConfiguracoes",
		"description": "StartFragment\n\n## ðŸš€ Guia Completo para Testes da API Financeira\n\nEsta coleÃ§Ã£o Postman cobre os principais endpoints da API de gestÃ£o financeira, incluindo transaÃ§Ãµes, orÃ§amentos, investimentos e autenticaÃ§Ã£o. Com ela, vocÃª poderÃ¡ testar todas as operaÃ§Ãµes CRUD (Create, Read, Update e Delete) e validar o funcionamento correto do sistema.\n\n---\n\n### ðŸ”– Como usar esta coleÃ§Ã£o\n\n#### 1\\. Enviando requisiÃ§Ãµes\n\n- Esta coleÃ§Ã£o inclui requisiÃ§Ãµes `POST`, `GET` e `DELETE` para diferentes recursos (transaÃ§Ãµes, orÃ§amentos, investimentos e login).\n    \n- Para testar, abra cada requisiÃ§Ã£o e clique em **Send**.\n    \n- Certifique-se de preencher corretamente o corpo (`Body`) para os mÃ©todos `POST` e `DELETE` conforme a especificaÃ§Ã£o de cada endpoint.\n    \n\n#### 2\\. Visualizando respostas\n\n- Observe o cÃ³digo de status HTTP (ex: 200, 201, 400, 404), mensagens e dados retornados para garantir que a API responde corretamente.\n    \n- Confira tambÃ©m o tempo de resposta para medir a performance.\n    \n\n#### 3\\. Atualizando os dados enviados\n\n- Modifique os dados no corpo das requisiÃ§Ãµes `POST` para criar transaÃ§Ãµes, orÃ§amentos, investimentos ou realizar login com diferentes usuÃ¡rios.\n    \n- No `DELETE`, informe o `id` correto e o email para exclusÃ£o segura de recursos.\n    \n\n#### 4\\. VariÃ¡veis e ambiente\n\n- Use variÃ¡veis para armazenar dados dinÃ¢micos como o `email`, `token` JWT e IDs gerados.\n    \n- Configure o `base_url` para apontar para sua API local ou de produÃ§Ã£o.\n    \n\n#### 5\\. ValidaÃ§Ã£o automÃ¡tica com testes\n\n- Cada requisiÃ§Ã£o possui scripts na aba **Tests** que validam o status da resposta, mensagens especÃ­ficas e formatos de dados.\n    \n- Isso ajuda a garantir que sua API funciona conforme esperado.\n    \n\nStartFragment\n\n### ðŸ“š Endpoints incluÃ­dos\n\n- **AutenticaÃ§Ã£o**: `POST /api/auth/login` â€“ login com email e senha, retorna token JWT.\n    \n- **TransaÃ§Ãµes**:\n    \n    - `POST /api/transaction/transactionCreate` â€“ cria nova transaÃ§Ã£o para usuÃ¡rio.\n        \n    - `DELETE /api/transaction/transactionDelete` â€“ apaga transaÃ§Ã£o pelo id.\n        \n- **OrÃ§amentos**:\n    \n    - `POST /api/budget/budgetCreate` â€“ cria orÃ§amento vinculado a usuÃ¡rio.\n        \n    - `DELETE /api/budget/budgetDelete` â€“ apaga orÃ§amento pelo id.\n        \n    - `GET /api/budget/budgetFind` â€“ lista orÃ§amentos do usuÃ¡rio pelo email.\n        \n- **Investimentos**:\n    \n    - `POST /api/investment/investmentCreate` â€“ cria investimento vinculado a usuÃ¡rio.\n        \n    - `DELETE /api/investment/investmentDelete` â€“ apaga investimento pelo id e email.\n        \n    - `GET /api/investment/investmentFind` â€“ lista investimentos do usuÃ¡rio pelo email.\n        \n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34572132"
	},
	"item": [
		{
			"name": "0.2 -> resume",
			"item": [
				{
					"name": "GET TRANSACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transaction/transactionFind?email=a@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transaction",
								"transactionFind"
							],
							"query": [
								{
									"key": "email",
									"value": "a@gmail.com"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "TRANSACTIONS_CREATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Teste\",\n  \"email\": \"maria.teste@example.com\",\n  \"password\": \"senhaSegura123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "TRANSACTIONS_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Teste\",\n  \"email\": \"maria.teste@example.com\",\n  \"password\": \"senhaSegura123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "0.4 -> Budget",
			"item": [
				{
					"name": "BUDGETS_CREATE Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Teste\",\n  \"email\": \"maria.teste@example.com\",\n  \"password\": \"senhaSegura123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "BUDGETS_DELETE Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Teste\",\n  \"email\": \"maria.teste@example.com\",\n  \"password\": \"senhaSegura123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "GET BUDGETS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transaction/transactionFind?email=a@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transaction",
								"transactionFind"
							],
							"query": [
								{
									"key": "email",
									"value": "a@gmail.com"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "0.6 -> DashBoard",
			"item": [
				{
					"name": "GET BUDGETS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transaction/transactionFind?email=a@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transaction",
								"transactionFind"
							],
							"query": [
								{
									"key": "email",
									"value": "a@gmail.com"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET TRANSACTIONS Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transaction/transactionFind?email=a@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transaction",
								"transactionFind"
							],
							"query": [
								{
									"key": "email",
									"value": "a@gmail.com"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "0.8 -> login/register",
			"item": [
				{
					"name": "REGISTRO DE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Teste\",\n  \"email\": \"maria.teste@example.com\",\n  \"password\": \"senhaSegura123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "LOGIN DE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Maria Teste\",\n  \"email\": \"maria.teste@example.com\",\n  \"password\": \"senhaSegura123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "1.0 -> investments",
			"item": [
				{
					"name": "INVESTIMENTS_CREATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"a@gmail.com\",\n  \"dados\": {\n    \"type\": \"CDB\",\n    \"value\": \"10001.00\",\n    \"institution\": \"Banco XYZ\",\n    \"growthTax\": \"0.9\",\n    \"growth\": \"300.00\",\n    \"date\": \"2025-06-10\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/investment/investmentCreate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"investment",
								"investmentCreate"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "GET INVESTMENTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/transaction/transactionFind?email=a@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"transaction",
								"transactionFind"
							],
							"query": [
								{
									"key": "email",
									"value": "a@gmail.com"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}